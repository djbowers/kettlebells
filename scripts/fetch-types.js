#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const https = require('https');

// Load configuration
const config = require('./config');

// Configuration
const BACKEND_REPO = config.BACKEND_REPO;
const BRANCH = config.BRANCH;
const TYPES_FILE = config.TYPES_FILE;
const OUTPUT_DIR = config.OUTPUT_DIR;
const OUTPUT_FILE = config.OUTPUT_FILE;

// Colors for console output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function makeRequest(url) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const options = {
      hostname: urlObj.hostname,
      path: urlObj.pathname + urlObj.search,
      method: 'GET',
      headers: config.HEADERS || {},
    };

    https
      .get(options, (res) => {
        let data = '';

        res.on('data', (chunk) => {
          data += chunk;
        });

        res.on('end', () => {
          if (res.statusCode === 200) {
            resolve(data);
          } else {
            reject(new Error(`HTTP ${res.statusCode}: ${res.statusMessage}`));
          }
        });
      })
      .on('error', (err) => {
        reject(err);
      });
  });
}

async function fetchTypes() {
  try {
    log('üîÑ Fetching Supabase types from backend repository...', 'blue');

    // GitHub raw content URL
    const url = `https://raw.githubusercontent.com/${BACKEND_REPO}/${BRANCH}/${TYPES_FILE}`;

    log(`üì° Fetching from: ${url}`, 'cyan');

    const typesContent = await makeRequest(url);

    // Ensure output directory exists
    if (!fs.existsSync(OUTPUT_DIR)) {
      fs.mkdirSync(OUTPUT_DIR, { recursive: true });
      log(`üìÅ Created directory: ${OUTPUT_DIR}`, 'green');
    }

    // Write the types file
    const outputPath = path.join(OUTPUT_DIR, OUTPUT_FILE);
    fs.writeFileSync(outputPath, typesContent);

    log(`‚úÖ Types successfully fetched and saved to: ${outputPath}`, 'green');
    log(`üìä File size: ${(typesContent.length / 1024).toFixed(2)} KB`, 'cyan');

    // Add a comment at the top of the file to indicate it's auto-generated
    const autoGeneratedComment = `// Auto-generated from ${BACKEND_REPO}/${BRANCH}/${TYPES_FILE}
// Generated on: ${new Date().toISOString()}
// Do not edit this file manually - it will be overwritten on next fetch

`;

    const finalContent = autoGeneratedComment + typesContent;
    fs.writeFileSync(outputPath, finalContent);

    log('üéâ Types fetch completed successfully!', 'green');
  } catch (error) {
    log(`‚ùå Error fetching types: ${error.message}`, 'red');

    if (error.message.includes('404')) {
      log('üí° Make sure:', 'yellow');
      log('   - The repository exists and is public', 'yellow');
      log('   - The branch name is correct', 'yellow');
      log('   - The types file path is correct', 'yellow');
      log('   - Update the BACKEND_REPO variable in this script', 'yellow');
    }

    process.exit(1);
  }
}

// Handle command line arguments
const args = process.argv.slice(2);

if (args.includes('--help') || args.includes('-h')) {
  log('üìñ Supabase Types Fetcher', 'bright');
  log('');
  log('Usage: node scripts/fetch-types.js [options]', 'cyan');
  log('');
  log('Options:', 'bright');
  log('  --help, -h     Show this help message', 'cyan');
  log('  --dry-run      Show what would be fetched without saving', 'cyan');
  log('');
  log('Configuration:', 'bright');
  log(`  Backend Repo: ${BACKEND_REPO}`, 'cyan');
  log(`  Branch: ${BRANCH}`, 'cyan');
  log(`  Types File: ${TYPES_FILE}`, 'cyan');
  log(`  Output: ${OUTPUT_DIR}/${OUTPUT_FILE}`, 'cyan');
  process.exit(0);
}

if (args.includes('--dry-run')) {
  log('üîç Dry run mode - would fetch types without saving', 'yellow');
  // In dry run mode, just show what would be fetched
  log(
    `Would fetch from: https://raw.githubusercontent.com/${BACKEND_REPO}/${BRANCH}/${TYPES_FILE}`,
    'cyan',
  );
  log(`Would save to: ${OUTPUT_DIR}/${OUTPUT_FILE}`, 'cyan');
  process.exit(0);
}

// Run the fetch
fetchTypes();
